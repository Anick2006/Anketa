import logging
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

TOKEN = '6846510496:AAFvqymD3NNDsQlmEVL5JDbgxVpDeQueB14'
credentials_file = 'credentials.json'
spreadsheet_id = '1-Zvg8i7Yx75dUSROeuiZd_YH4vpY3XvQQq37dY7_7C8'

RUSSIAN_QUESTIONS = [
    "1.–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –ø–æ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç—É",
    "2. –í–∞—à–µ –∏–º—è –ø–æ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç—É",
    "3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–¥ –º–º –≥–≥–≥–≥",
    "4. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç—É",
    "5. –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞?",
    "6. –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞? –¥–¥ –º–º –≥–≥–≥–≥",
    "7. –°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞?",
    "8. –ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞:",
    "9. –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: \n(‚Ä¢–ñ–µ–Ω–∞—Ç)\n(‚Ä¢–ó–∞–º—É–∂–µ–º) \n(‚Ä¢—Ö–æ–ª–æ—Å—Ç) \n(‚Ä¢—Ä–∞–∑–≤–µ–¥–µ–Ω/–∞) \n(‚Ä¢–≤–¥–æ–≤–µ—Ü/–≤–¥–æ–≤–∞)",
    "10. –î–µ—Ç–∏\n(‚Ä¢–î–ê)\n(‚Ä¢–ù–ï–¢)",
    "11. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\n(‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —à–∫–æ–ª–∞)\n(‚Ä¢ –°—Ä–µ–¥–Ω–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ)\n(‚Ä¢ –ë–∞–∫–∞–ª–∞–≤—Ä)\n(‚Ä¢ –ú–∞–≥–∏—Å—Ç—Ä)\n(‚Ä¢ –î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫)",
    "12. –ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è",
    "13. –ë—ã–ª–∏ –ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç?\n(‚Ä¢–î–ê)\n(‚Ä¢–ù–ï–¢)",
    "14. –ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å –∏–º—É—â–µ—Å—Ç–≤–æ \n –ù–∞–ø—Ä–∏–º–µ—Ä:–ê–≤—Ç–æ–º–∞—à–∏–Ω–∞, –¥–æ–º, –¥–∞—á–∞ –∏ —Ç.–¥?\n(‚Ä¢–î–ê)\n(‚Ä¢–ù–ï–¢)",
    "15. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?\n(‚Ä¢–î–ê)\n(‚Ä¢–ù–ï–¢)",
    "16. –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
    "17. –í—ã —Ä–∞–Ω—å—à–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ö–∞–Ω–∞–¥—Å–∫–æ–π –≤–∏–∑—ã?\n(‚Ä¢–î–ê)\n(‚Ä¢–ù–ï–¢)"
]

UZBEK_CYRILLIC_QUESTIONS = [
    "1. –§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç –±—û–π–∏—á–∞",
    "2. –ò—Å–º–∏–Ω–≥–∏–∑ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç –±—É–π–∏—á–∞",
    "3. –¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑ –∫–∫ –æ–æ –π–π–π–π",
    "4. –¢—É“ì–∏–ª–≥–∞–Ω –∂–æ–π–∏–Ω–≥–∏–∑ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç –±—û–π–∏—á–∞",
    "5. –ó–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏—è—Å–∏ –≤–∞ —Ä–∞“õ–∞–º–∏",
    "6. –ó–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç –±–µ—Ä–∏–ª–≥–∞–Ω —Å–∞–Ω–∞ –∫–∫ –æ–æ –π–π–π–π",
    "7. –ó–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏–Ω–≥ –∞–º–∞–ª “õ–∏–ª–∏—à –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–π–¥–∏–≥–∞–Ω —Å–∞–Ω–∞ –∫–∫ –æ–æ –π–π–π–π",
    "8. –Ø—à–∞—à –º–∞–Ω–∑–∏–ª–∏–Ω–≥–∏–∑: ",
    "9. –û–∏–ª–∞–≤–∏–π —Ö–æ–ª–∞—Ç–∏–Ω–≥–∏–∑:\n(‚Ä¢–û–∏–ª–∞–ª–∏)\n(‚Ä¢–¢—É—Ä–º—É—à “õ—É—Ä–º–∞–≥–∞–Ω)\n(‚Ä¢–ê–∂—Ä–∞—à–≥–∞–Ω)\n(‚Ä¢–ë–µ–≤–∞)",
    "10. –§–∞—Ä–∑–∞–Ω–¥–∏–Ω–≥–∏–∑ –±–æ—Ä–º–∏\n(X–∞)\n(–ô—û“õ)",
    "11. –ú–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑:\n(‚Ä¢–é—Ä—Ç–∞ –º–∞–∫—Ç–∞–±)\n(‚Ä¢–é—Ä—Ç–∞-–º–∞—Ö—Å—É—Å)\n(‚Ä¢–ë–∞–∫–∞–ª–∞–≤—Ä)\n(‚Ä¢–ú–∞–≥–∏—Å—Ç—Ä)\n(‚Ä¢–§–∞–Ω –¥–æ–∫—Ç–æ—Ä–∏)",
    "12. –¢–∞–º–æ–º–ª–∞–≥–∞–Ω —û“õ—É–≤ —é—Ä—Ç–∏–≥–∏–∑ –Ω–æ–º–∏",
    "13. –°—û–Ω–≥–≥–∏ 5 –π–∏–ª –º–æ–±–∞–π–Ω–∏–¥–∞ —Ö–æ—Ä–∏–∂–≥–∞ —á–∏“õ“õ–∞–Ω–º–∏—Å–∏–∑ \n(‚Ä¢X–∞)\n(‚Ä¢–ô—û“õ)",
    "14. –ù–æ–º–∏–Ω–≥–∏–∑–¥–∞ –º—É–ª–∫ –±–æ—Ä–º–∏ - –ê–≤—Ç–æ–º–∞—à–∏–Ω–∞, —É–π, –¥–∞–ª–∞ —Ö–æ–≤–ª–∏ –≤–∞ –±–æ—à“õ–∞–ª–∞—Ä\n(‚Ä¢X–∞)\n(‚Ä¢–ô—û“õ)",
    "15. “≤–æ–∑–∏—Ä–¥–∞ –∏—à–ª–∞–π—Å–∏–∑–º–∏ \n(‚Ä¢X–∞)\n(‚Ä¢–ô—û“õ)",
    "16. –ò—à –∂–æ–π–∏–Ω–≥–∏–∑ –≤–∞ –ª–∞–≤–æ–∑–∏–º–∏–Ω–≥–∏–∑: ",
    "17. –ò–ª–≥–∞—Ä–∏ –ö–∞–Ω–∞–¥–∞ –¥–∞–≤–ª–∞—Ç–∏ –≤–∏–∑–∞—Å–∏–Ω–∏ –æ–ª–∏—à —É—á—É–Ω —Ö—É–∂–∂–∞—Ç —Ç–æ–ø—à–∏—Ä–≥–∞–Ω–º–∏—Å–∏–∑\n(‚Ä¢X–∞)\n(‚Ä¢–ô—û“õ)"
]

UZBEK_LATIN_QUESTIONS = [
    "1.Familiyangiz zagran pasport bo'yicha",
    "2. Ismingiz zagran pasport bo'yicha",
    "3. Tug'ilgan sanangiz dd mm yyyy",
    "4. Tug'ilgan joyingiz zagran pasport bo'yicha",
    "5. Zagran pasport seriyasi va raqami ",
    "6. Zagran pasport berilgan sanadd mm yyyy",
    "7. Zagran passportning amal qilish muddati tugaydigan sana dd mm yyyy",
    "8. Yashash manzilingiz: ",
    "9. Oilaviy holatingiz:\n(‚Ä¢Oilali)\n(‚Ä¢Turmush qurmagan)\n(‚Ä¢Ajrashgan)\n(‚Ä¢Beva)",
    "10. Farzandingiz bormi\n(‚Ä¢Ha)\n(‚Ä¢Yo'q)",
    "11. Ma'lumotingiz:\n(‚Ä¢O'rta maktab)\n(‚Ä¢O'rta maxsus)\n(‚Ä¢Bakalavr)\n(‚Ä¢Magistr)\n(‚Ä¢Fan doktori)",
    "12. Tamomlagan o/'quv yurtingiz nomi",
    "13. So'nggi 5 yil mobaynida horijga chiqqanmisiz\n(‚Ä¢Ha)\n(‚Ä¢Yo'q)",
    "14. Nomingizda mulk bormi avtomashina, uy, dala hovli va boshqalar\n(‚Ä¢Ha)\n(‚Ä¢Yo'q) ",
    "15. Hozirda ishlaysizmi\n(‚Ä¢Ha)\n(‚Ä¢Yo'q)",
    "16. Ish joyingiz va lavozimingiz: ",
    "17. Ilgari Kanada davlati vizasini olish uchun hujjat topshirganmisiz\n(‚Ä¢Ha)\n(‚Ä¢Yo'q)"
]

scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, scope)
client = gspread.authorize(creds)

spreadsheet = client.open_by_key(spreadsheet_id)
sheet = spreadsheet.get_worksheet(0)  # 0 refers to the first sheet

def is_numeric(s: str) -> bool:
    return s.replace(' ', '').isdigit()

def has_options(question: str) -> bool:
    return "(" in question and ")" in question

def is_valid_date_format(s: str) -> bool:
    pattern = r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$"
    return re.match(pattern, s) is not None
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

async def send_question(message: types.Message, question):
    if has_options(question):
        options = re.findall(r'\((.*?)\)', question)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for option in options:
            keyboard.add(KeyboardButton(option.strip()))
        await message.answer(question.split("(")[0], reply_markup=keyboard)
    else:
        await message.answer(question, reply_markup=ReplyKeyboardRemove())

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("–£–∑–±–µ–∫ —Ç–∏–ª–∏(–∫–∏—Ä–∏–ª—á–∞)"))
    keyboard.row(KeyboardButton("O'zbek tili (lotincha)"))
    keyboard.row(KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"))
    await message.answer('üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! \n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n\nüëãAssalomu aleykum! \n Davom ettirish tilni tanlang: ', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["–£–∑–±–µ–∫ —Ç–∏–ª–∏(–∫–∏—Ä–∏–ª—á–∞)", "O'zbek tili (lotincha)", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"])
async def handle_language_choice(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    
    if text == "–£–∑–±–µ–∫ —Ç–∏–ª–∏(–∫–∏—Ä–∏–ª—á–∞)":
        dp.storage[user_id] = {"index": 0, "questions": UZBEK_CYRILLIC_QUESTIONS, "answers": [], "language": "uzb"}
    elif text == "O'zbek tili (lotincha)":
        dp.storage[user_id] = {"index": 0, "questions": UZBEK_LATIN_QUESTIONS, "answers": [], "language": "uzb"}
    elif text == "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫":
        dp.storage[user_id] = {"index": 0, "questions": RUSSIAN_QUESTIONS, "answers": [], "language": "rus"}
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await send_question(message, dp.storage[user_id]["questions"][0])

@dp.message_handler(lambda message: True)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_data = dp.storage.get(user_id, {})
    
    if "questions" not in user_data or "index" not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
        return

    current_question = user_data["questions"][user_data["index"]]

    if user_data["index"] in [2, 5, 6] and not is_valid_date_format(message.text):
        await message.answer("–û—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    if has_options(current_question):
        if message.text in [option.strip() for option in re.findall(r'\((.*?)\)', current_question)]:
            user_data.setdefault("answers", []).append(message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
            return
    else:
        user_data.setdefault("answers", []).append(message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç

    if user_data["index"] >= len(user_data["questions"]) - 1:
        user_data["answers"].insert(0, user_data["language"])  # –í—Å—Ç–∞–≤–ª—è–µ–º —è–∑—ã–∫ –≤–º–µ—Å—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sheet.append_row(user_data["answers"])
        del dp.storage[user_id]
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
    else:
        user_data["index"] += 1
        await send_question(message, user_data["questions"][user_data["index"]])

    dp.storage[user_id] = user_data

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
